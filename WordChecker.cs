namespace Scrabble
{
    using System.IO;
    using System.Diagnostics;
    using System.Windows.Forms;
    using System.Text;
    using System.Collections.Generic;

    internal class WordChecker
    {
        private static string run_cmd(string cmd, string args)
        {
            ProcessStartInfo start = new ProcessStartInfo();
            start.FileName = @"C:\Users\Mrah\AppData\Local\Programs\Python\Python38-32\python.exe";
            start.Arguments = string.Format("\"{0}\" \"{1}\"", cmd, args);
            start.UseShellExecute = false;// Do not use OS shell
            start.CreateNoWindow = true; // We don't need new window
            start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)
            using (Process process = Process.Start(start))
            {
                using (StreamReader reader = process.StandardOutput)
                {
                    string stderr = process.StandardError.ReadToEnd(); // Here are the exceptions from our Python script
                    string result = reader.ReadToEnd(); // Here is the result of StdOut
                    return result;
                }
            }
        }

        public static bool CheckWord(string word)
        {
            string result = run_cmd(@"C:\Users\Mrah\PycharmProjects\WordChecker\CheckWord.py", "\"" + word + "\"");

            return string.Equals(result.ToLower().Trim(), "true");
        }


        public static HashSet<string> VerifyBoard(Button[,] btns, List<int> placements)
        {
            HashSet<string> words = new HashSet<string>();
            foreach (int tileIndex in placements)
            {
                words.Add(CheckHorizontal(btns, tileIndex));
                words.Add(CheckVertical(btns, tileIndex));
            }

            foreach(string word in words)
            {
                if (!CheckWord(word))
                {
                    word.Insert(word.Length, "!");
                } 
            }
            return words;
        }

        private static string CheckHorizontal(Button[,] btns, int tileIndex)
        {
            StringBuilder sb = new StringBuilder();
            int[] indicies = BoardHandler.getRowCol(tileIndex);
            int row = indicies[0];
            int col = indicies[1];
            int max = 14, min = 0;
            //Right
            sb.Append(btns[row, col].Text);
            for(int i = col; i < max; i++)
            {
                if(btns[row,col].Text != "")
                {
                    sb.Append(btns[row, i].Text);
                }
                else
                {
                    break;
                }
            }
            //Left
            for (int i = col; i >= min; i--)
            {
                if (btns[row, i].Text != "")
                {
                    sb.Insert(0, btns[row, i].Text);
                }
                else
                {
                    break;
                }
            }

            return sb.ToString();
        }

        private static string CheckVertical(Button[,] btns, int tileIndex)
        {
            StringBuilder sb = new StringBuilder();
            int[] indicies = BoardHandler.getRowCol(tileIndex);
            int row = indicies[0];
            int col = indicies[1];
            int max = 14, min = 0;
            //Down
            sb.Append(btns[row, col].Text);
            for (int i = row; i < max; i++)
            {
                if (btns[row, col].Text != "")
                {
                    sb.Append(btns[i, col].Text);
                }
                else
                {
                    break;
                }
            }
            //Up
            for (int i = row; i >= min; i--)
            {
                if (btns[row, i].Text != "")
                {
                    sb.Insert(0, btns[i, col].Text);
                }
                else
                {
                    break;
                }
            }

            return sb.ToString();
        }


    }
}